import { IonicNativePlugin } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare enum KeyboardStyle {
    Light = "light",
    Dark = "dark"
}
export declare enum KeyboardResizeMode {
    Native = "native",
    Ionic = "ionic",
    Body = "body",
    None = "none"
}
/**
 * @name Keyboard
 * @description
 * Keyboard plugin for Cordova.
 *
 * Requires Cordova plugin: `cordova-plugin-ionic-keyboard`. For more info, please see the [Keyboard plugin docs](https://github.com/ionic-team/cordova-plugin-ionic-keyboard).
 *
 * @usage
 * ```typescript
 * import { Keyboard } from '@ionic-native/keyboard/ngx';
 *
 * constructor(private keyboard: Keyboard) { }
 *
 * ...
 *
 * this.keyboard.show();
 *
 * this.keyboard.hide();
 *
 * ```
 */
export declare class Keyboard extends IonicNativePlugin {
    /**
     * Check keyboard status visible or not.
     * @returns {boolean}
     */
    isVisible: boolean;
    /**
     * Hide the keyboard accessory bar with the next, previous and done buttons.
     * @param hide {boolean}
     */
    hideFormAccessoryBar(hide: boolean): void;
    /**
     * Hide the keyboard if shown.
     */
    hide(): void;
    /**
     * Force keyboard to be shown.
     */
    show(): void;
    /**
     * Programatically set the resize mode
     * @param mode {string}
     */
    setResizeMode(mode: KeyboardResizeMode): void;
    /**
     * Programatically set Keyboard style
     * @param mode {string}
     */
    setKeyboardStyle(style: KeyboardStyle): void;
    /**
     * Programatically enable or disable the WebView scroll
     * @param mode {string}
     */
    disableScroll(disable: boolean): void;
    /**
     * Creates an observable that notifies you when the keyboard is shown. Unsubscribe to observable to cancel event watch.
     * @returns {Observable<any>}
     */
    onKeyboardShow(): Observable<any>;
    /**
     * Creates an observable that notifies you when the keyboard will show. Unsubscribe to observable to cancel event watch.
     * @returns {Observable<any>}
     */
    onKeyboardWillShow(): Observable<any>;
    /**
     * Creates an observable that notifies you when the keyboard did show. Unsubscribe to observable to cancel event watch.
     * @returns {Observable<any>}
     */
    onKeyboardDidShow(): Observable<any>;
    /**
     * Creates an observable that notifies you when the keyboard is hidden. Unsubscribe to observable to cancel event watch.
     * @returns {Observable<any>}
     */
    onKeyboardHide(): Observable<any>;
    /**
     * Creates an observable that notifies you when the keyboard will hide. Unsubscribe to observable to cancel event watch.
     * @returns {Observable<any>}
     */
    onKeyboardWillHide(): Observable<any>;
    /**
     * Creates an observable that notifies you when the keyboard did hide. Unsubscribe to observable to cancel event watch.
     * @returns {Observable<any>}
     */
    onKeyboardDidHide(): Observable<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Keyboard, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Keyboard>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgZW51bSBLZXlib2FyZFN0eWxlIHtcbiAgICBMaWdodCA9IFwibGlnaHRcIixcbiAgICBEYXJrID0gXCJkYXJrXCJcbn1cbmV4cG9ydCBkZWNsYXJlIGVudW0gS2V5Ym9hcmRSZXNpemVNb2RlIHtcbiAgICBOYXRpdmUgPSBcIm5hdGl2ZVwiLFxuICAgIElvbmljID0gXCJpb25pY1wiLFxuICAgIEJvZHkgPSBcImJvZHlcIixcbiAgICBOb25lID0gXCJub25lXCJcbn1cbi8qKlxuICogQG5hbWUgS2V5Ym9hcmRcbiAqIEBkZXNjcmlwdGlvblxuICogS2V5Ym9hcmQgcGx1Z2luIGZvciBDb3Jkb3ZhLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4taW9uaWMta2V5Ym9hcmRgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbS2V5Ym9hcmQgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2NvcmRvdmEtcGx1Z2luLWlvbmljLWtleWJvYXJkKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEtleWJvYXJkIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9rZXlib2FyZC9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUga2V5Ym9hcmQ6IEtleWJvYXJkKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmtleWJvYXJkLnNob3coKTtcbiAqXG4gKiB0aGlzLmtleWJvYXJkLmhpZGUoKTtcbiAqXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgS2V5Ym9hcmQgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gICAgLyoqXG4gICAgICogQ2hlY2sga2V5Ym9hcmQgc3RhdHVzIHZpc2libGUgb3Igbm90LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzVmlzaWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBIaWRlIHRoZSBrZXlib2FyZCBhY2Nlc3NvcnkgYmFyIHdpdGggdGhlIG5leHQsIHByZXZpb3VzIGFuZCBkb25lIGJ1dHRvbnMuXG4gICAgICogQHBhcmFtIGhpZGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgaGlkZUZvcm1BY2Nlc3NvcnlCYXIoaGlkZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUga2V5Ym9hcmQgaWYgc2hvd24uXG4gICAgICovXG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEZvcmNlIGtleWJvYXJkIHRvIGJlIHNob3duLlxuICAgICAqL1xuICAgIHNob3coKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBQcm9ncmFtYXRpY2FsbHkgc2V0IHRoZSByZXNpemUgbW9kZVxuICAgICAqIEBwYXJhbSBtb2RlIHtzdHJpbmd9XG4gICAgICovXG4gICAgc2V0UmVzaXplTW9kZShtb2RlOiBLZXlib2FyZFJlc2l6ZU1vZGUpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFByb2dyYW1hdGljYWxseSBzZXQgS2V5Ym9hcmQgc3R5bGVcbiAgICAgKiBAcGFyYW0gbW9kZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHNldEtleWJvYXJkU3R5bGUoc3R5bGU6IEtleWJvYXJkU3R5bGUpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFByb2dyYW1hdGljYWxseSBlbmFibGUgb3IgZGlzYWJsZSB0aGUgV2ViVmlldyBzY3JvbGxcbiAgICAgKiBAcGFyYW0gbW9kZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGRpc2FibGVTY3JvbGwoZGlzYWJsZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgeW91IHdoZW4gdGhlIGtleWJvYXJkIGlzIHNob3duLiBVbnN1YnNjcmliZSB0byBvYnNlcnZhYmxlIHRvIGNhbmNlbCBldmVudCB3YXRjaC5cbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgICAqL1xuICAgIG9uS2V5Ym9hcmRTaG93KCk6IE9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9ic2VydmFibGUgdGhhdCBub3RpZmllcyB5b3Ugd2hlbiB0aGUga2V5Ym9hcmQgd2lsbCBzaG93LiBVbnN1YnNjcmliZSB0byBvYnNlcnZhYmxlIHRvIGNhbmNlbCBldmVudCB3YXRjaC5cbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgICAqL1xuICAgIG9uS2V5Ym9hcmRXaWxsU2hvdygpOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgeW91IHdoZW4gdGhlIGtleWJvYXJkIGRpZCBzaG93LiBVbnN1YnNjcmliZSB0byBvYnNlcnZhYmxlIHRvIGNhbmNlbCBldmVudCB3YXRjaC5cbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgICAqL1xuICAgIG9uS2V5Ym9hcmREaWRTaG93KCk6IE9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9ic2VydmFibGUgdGhhdCBub3RpZmllcyB5b3Ugd2hlbiB0aGUga2V5Ym9hcmQgaXMgaGlkZGVuLiBVbnN1YnNjcmliZSB0byBvYnNlcnZhYmxlIHRvIGNhbmNlbCBldmVudCB3YXRjaC5cbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgICAqL1xuICAgIG9uS2V5Ym9hcmRIaWRlKCk6IE9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9ic2VydmFibGUgdGhhdCBub3RpZmllcyB5b3Ugd2hlbiB0aGUga2V5Ym9hcmQgd2lsbCBoaWRlLiBVbnN1YnNjcmliZSB0byBvYnNlcnZhYmxlIHRvIGNhbmNlbCBldmVudCB3YXRjaC5cbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgICAqL1xuICAgIG9uS2V5Ym9hcmRXaWxsSGlkZSgpOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgeW91IHdoZW4gdGhlIGtleWJvYXJkIGRpZCBoaWRlLiBVbnN1YnNjcmliZSB0byBvYnNlcnZhYmxlIHRvIGNhbmNlbCBldmVudCB3YXRjaC5cbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgICAqL1xuICAgIG9uS2V5Ym9hcmREaWRIaWRlKCk6IE9ic2VydmFibGU8YW55Pjtcbn1cbiJdfQ==